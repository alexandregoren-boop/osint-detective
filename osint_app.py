import streamlit as st
import pandas as pd

st.set_page_config("OSINT Detective", layout="wide")
st.title("üîé OSINT Detective ‚Äì Recherche Universelle")

# Sidebar
st.sidebar.header("Options de recherche")
search_input = st.sidebar.text_input("Tapez un nom, email ou num√©ro")
search_type = "Inconnu"
if search_input:
    if "@" in search_input:
        search_type = "email"
    elif search_input.replace("+", "").replace(" ", "").isdigit():
        search_type = "num√©ro"
    else:
        search_type = "nom/pr√©nom"

sources = st.sidebar.multiselect(
    "Sources √† interroger‚ÄØ:",
    ["Google", "Pages Jaunes", "LinkedIn", "Facebook", "X (Twitter)", "Pappers", "Societe.com", "Infogreffe", "D√©c√®s (avis)", "Google Dorking"],
    default=["Google", "Pages Jaunes"]
)

uploaded_file = st.sidebar.file_uploader("Importer des contacts Excel", type=["xlsx", "csv"])

# Historique simplifi√© (√† remplacer par Storage vrai plus tard)
if 'history' not in st.session_state:
    st.session_state['history'] = []
if st.sidebar.button("Voir l'historique recherches"):
    st.write(pd.DataFrame(st.session_state['history']))

# Lancement recherche
if st.button("Lancer la recherche") and search_input:
    st.info(f"Recherche {search_type} sur‚ÄØ: {', '.join(sources)}")
    # Ajout √† l'historique
    st.session_state['history'].append({"input": search_input, "type": search_type, "sources": sources})
    # ---- ZONE √Ä REMPLIR ----
    # Ici¬†: pour chaque source, lancer sa recherche d√©di√©e (Google, PJ etc.) et afficher les r√©sultats
    # Exemple factice :
    results = []
    if "Google" in sources:
        results.append({"source": "Google", "trouv√©": f"Page {search_input} sur Google (simul√©)"})
    if "Pages Jaunes" in sources:
        results.append({"source": "Pages Jaunes", "trouv√©": f"Entr√©e {search_input} sur Pages Jaunes (simul√©)"})
    st.dataframe(pd.DataFrame(results))


# Export Excel
if st.button("Exporter les derniers r√©sultats en Excel"):
    if 'results' in locals():
        df = pd.DataFrame(results)
        df.to_excel("r√©sultats_osint.xlsx")
        st.success("Fichier Excel g√©n√©r√©¬†: r√©sultats_osint.xlsx (√† r√©cup√©rer dans la version d√©ploy√©e)")
    else:
        st.warning("Lancez une recherche d'abord¬†!")

st.markdown("---")

st.info("""
üëÜ Ce prototype est pr√™t √† accueillir TOUTES les sources OSINT :
il suffit d'impl√©menter un module pour chaque API/scraper, et chaque r√©sultat viendra remplir le tableau ci-dessus.
L'import Excel d√©clenchera la recherche par lot, l'export Excel ou PDF affichera un lien pour t√©l√©chargement.
L'historique sera stock√© en base d√®s la version h√©berg√©e.
""")
